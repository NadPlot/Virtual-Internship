from fastapi import Depends, FastAPI, Request
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
import crud, schemas
from database import SessionLocal, engine
from exceptions import PerevalExistsException, EmailNotExistsException


description = """
–ù–∞ —Å–∞–π—Ç–µ https://pereval.online/ –§–°–¢–† –≤–µ–¥—ë—Ç –±–∞–∑—É –≥–æ—Ä–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç—É—Ä–∏—Å—Ç–∞–º–∏.
–ü—Ä–æ–µ–∫—Ç –§–°–¢–† "–ü–µ—Ä–µ–≤–∞–ª Online" —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≥–æ—Ä–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.

## –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –æ –ø–µ—Ä–µ–≤–∞–ª–µ
–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –§–°–¢–†. üöÄ
"""


app = FastAPI(
    title="REST API FSTR",
    description=description,
)


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@app.get("/")
async def root():
    return {
    "method GET by id": "/pereval/{id} - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–∞–ª–µ –ø–æ id",
    "method POST": "/submitData/ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–∞–ª–µ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç JSON)",
    "method GET by email": "submitData/email/{email] - –ø–æ email –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤",
    "method PATCH": "submitData/{id} - –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–µ—Ä–µ–≤–∞–ª–µ, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç JSON"
}


# –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å (–ø–µ—Ä–µ–≤–∞–ª) –ø–æ id.
@app.get("/pereval/{id}/", response_model=schemas.AddedRead)
def read_pereval(id: int, db: Session = Depends(get_db)):
    pereval = crud.get_pereval(db, id=id)
    if not pereval:
        raise PerevalExistsException(id)
    return pereval


# –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–∞–ª(—ã) –ø–æ –ø–æ—á—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/submitData/email/{email}", response_model=schemas.AddedList)
def get_pereval_list_by_user_email(email: str, db: Session = Depends(get_db)):
    db_user = crud.get_user_by_email(db, email=email)
    if not db_user:
        raise EmailNotExistsException(email=email)
    list = crud.get_pereval_by_user_email(db, email=email)
    return list


# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–∞–ª–µ
@app.post("/submitData/", response_model=schemas.AddedBase)
def add_pereval(raw_data: schemas.AddedRaw, db: Session = Depends(get_db)):
    db_user = crud.get_user_by_email(db, email=raw_data.user.email)
    if db_user:
        user = db_user.id
    else:
        user = crud.create_user(db, user=raw_data.user)

    coords = crud.create_coords(db, coords=raw_data.coords)
    level = crud.create_level(db, level=raw_data.level)
    foto = crud.add_foto(db, foto=raw_data.images)
    pereval = crud.create_pereval(db, raw_data, user, coords, level)
    images = crud.add_relation(db, pereval.id, foto)
    return JSONResponse(status_code=200, content={"status": 200, "message": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", "id": pereval.id})


# –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å new
@app.patch("/submitData/{id}", response_model=schemas.AddedBase)
def edit_pereval(id: int, pereval: schemas.AddedRaw, db: Session = Depends(get_db)):
    get_pereval = crud.get_pereval(db, id=id)  # –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–∞–ª –ø–æ id –∏–∑ –ë–î
    if not get_pereval:
        raise PerevalExistsException(id)
    if get_pereval['status'] == "new":  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞
        crud.update_pereval(db, pereval, id)
    else:
        list_status = {
            "new": "–Ω–æ–≤—ã–π",
            "pending": "–≤ —Ä–∞–±–æ—Ç–µ",
            "accepted": "–ø—Ä–∏–Ω—è—Ç",
            "rejected": "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
        }
        status = get_pereval['status']  # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä new
        for keys in list_status:
            if keys == status:
                st = list_status.get(f"{status}")
                return JSONResponse(status_code=400, content={"state": 0, "message": f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞: {st}"})
    return JSONResponse(status_code=200, content={"state": 1, "message": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"})


@app.exception_handler(PerevalExistsException)
async def pereval_exists_handler(request: Request, exc: PerevalExistsException):
    return JSONResponse(
        status_code=400,
        content={"status": 400, "message": "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "id": f"{exc.id}"}
    )


@app.exception_handler(EmailNotExistsException)
async def email_not_exists_handler(request: Request, exc: EmailNotExistsException):
    return JSONResponse(
        status_code=400,
        content={"status": 400, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º email –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}
    )
